// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    ProductComment ProductComment[]
    Person         Person?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// PRODUCT 

model Product {
    productId          Int    @id @unique @default(autoincrement())
    productName        String
    productDescription String
    productPrice       Float
    productCount       Int

    saleId      Int
    productSale ProductSale?

    productSizes  ProductSize[]
    productImages ProductImage[]

    inWishlists Wishlist[]
}

model ProductSize {
    sizeId   String @id
    sizeName String

    Product   Product? @relation(fields: [productId], references: [productId])
    productId Int?
}

model ProductSale {
    saleId     Int      @id @default(autoincrement())
    salePrice  String
    expireDate DateTime

    productId Int     @unique
    Product   Product @relation(fields: [productId], references: [productId])
}

model ProductImage {
    productImageId   Int    @id @default(autoincrement())
    productImagePath String

    productId Int
    Product   Product @relation(fields: [productId], references: [productId])
}

model ProductComment {
    productCommentId      Int       @id @default(autoincrement())
    productCommentContent String
    dateCreated           DateTime  @default(now())
    dateModified          DateTime?

    userId String
    user   User   @relation(fields: [userId], references: [id])

    repliesTo ProductComment   @relation("reply", fields: [productCommentId], references: [productCommentId])
    repliedBy ProductComment[] @relation("reply")
}

// ORDER

model Order {
    orderId Int @id @default(autoincrement())

    orderProducts OrderProduct[]

    addressId   Int
    deliveredTo Address @relation(fields: [addressId], references: [addressId])
}

model OrderProduct {
    orderProductId Int @id @default(autoincrement())

    orderId Int?
    order   Order? @relation(fields: [orderId], references: [orderId])

    buycartId String?
    Buycart   Buycart? @relation(fields: [buycartId], references: [buycartId])
}

// PERSON
model Person {
    personId      String @id @default(cuid())
    personCpf     Int
    personName    String
    personSurname String

    userId    String    @unique
    user      User      @relation(fields: [userId], references: [id])
    Addresses Address[]
}

// ADDRESS
model Address {
    addressId    Int    @id @default(autoincrement())
    addressZip   Int
    addressState String
    addressCity  String
    addressLine1 String
    addressLine2 String

    addressTimesUsed Int @default(dbgenerated("0"))

    personId String
    person   Person @relation(fields: [personId], references: [personId])

    orders Order[]
}

// USER OWNED
model Wishlist {
    wishlistId String @id @default(cuid())

    products Product[]
}

model Buycart {
    buycartId String @id @default(cuid())

    orderProducts OrderProduct[]
}
